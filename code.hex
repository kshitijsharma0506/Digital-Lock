/* Main.c file generated by New Project wizard
 *
 * Created:   Fri Aug 31 2018
 * Processor: AT89C51
 * Compiler:  Keil for 8051
 */

#include <reg51.h>	/* define 8051 registers */

void delay_50ms(unsigned int);
void init_Sys(void);
void set_sett(void);
void set_data(void);
void s_latch(unsigned char );
void clr(void);
void prep_Wrt(void);
void prep_Wrt2(void);
unsigned char rowFinder1(void);
unsigned char rowFinder2(void);
unsigned char rowFinder3(void);
unsigned char rowFinder4(void);
 
void postKyData(unsigned char);

void class_init(void);
void prepKeyb(void);
void prepLCD(unsigned char );

/*-----------------------------------------------
;P2.0-P2.7 are connected to LCD data pins D0-D7
;P3.5 is connected to RS pin of LCD
;P3.6 is connected to R/W pin of LCD
;P3.7 is connected to E pin of LCD
-----------------------------------------------*/
#define LCD P2
sbit RS=P3^5;
sbit RW=P3^6;
sbit EN=P3^7;

/*-----------------------------------------------
;P1.0-P1.4  connected to rows, P1.5-P1.7 to column
-----------------------------------------------*/
sbit R1=P1^4;
sbit R2=P1^3;
sbit R3=P1^2;
sbit R4=P1^1;

sbit C1=P1^5;
sbit C2=P1^6;
sbit C3=P1^7;
sbit user_switch=P1^0;

sbit MOTOR_1=P3^0;
sbit MOTOR_2=P3^1;

sbit ALARM_PIN=P3^4;
sbit EXT_INT=P3^2;

unsigned char ALARM_TRIG=0,
	defPass[6]="123456",
	asc_Alarm[5]="ALARM",
	asc_Greet1[10]="Hey there,",
	asc_Greet2[8]="Welcome!",
	asc_EnterPass[12]="Enter pass..",
	asc_Misc[14]="Pass mismatch!",
	asc_Redo[15]="Pls try again..",
	asc_Success[2]="Ok",
	asc_Ndpass1[9]="I need ur",
	asc_Ndpass2[11]="pass pls...",
	asc_changePass[9]="pass rst?",
	asc_openDoor[2]="Op",
	asc_closDoor[2]="Sh";

void ex0_isr (void) interrupt 0
{
	EXT_INT=1;
	ALARM_PIN=0;
	
}


/*=============================================================================
The main C function.  Program execution starts
here after stack initialization.
=============================================================================*/
void main(void)
 { 
   init_Sys();
	 class_init();
	 
/*-----------------------------------------------
Wait forever.
Note that an embedded program never exits (because
there is no operating system to return to).  It
must loop and execute forever.
-----------------------------------------------*/
   while (1){
	 
	 }
}
 /*=============================================================================
=============================================================================*/

 void init_Sys(void){
    
 /*-------------------------------LCD INTIALISATION-------------------------------*/
    RW=0;		//R/W=0 for write
    RS=0;		//RS=0 for command
    EN=1;		//E=1 for high pulse
    
    delay_50ms(1); //give LCD some time

    set_sett();
    LCD=0x38;				//;INIT. LCD 2 LINES, 5X7 MATRIX
    s_latch(4);
	
    LCD=0x0F;				//Display on, cursor blinking
    s_latch(1);
 /*-------------------------------LCD INTIALISATION-------------------------------*/	 
	 
	 MOTOR_1=0;
	 MOTOR_2=0;
	 
	 ALARM_PIN=0;
	 
		/*-----------------------------------------------
		Configure INT0 (external interrupt 0) to generate
		an interrupt on the falling-edge of /INT0 (P3.2).
		Enable the EX0 interrupt and then enable the
		global interrupt flag.
		-----------------------------------------------*/
		IT0 = 1;   // Configure interrupt 0 for falling edge on /INT0 (P3.2)
		EX0 = 1;   // Enable EX0 Interrupt
		EA = 1;    // Enable Global Interrupt Flag

 }
 void set_sett(void){
	RW=0;		//R/W=0 for write
	RS=0;		//RS=0 for command
}
void set_data(void){
	RW=0;//R/W=0 for write
	RS=1;
}

/*-----------------------------------------------
;calls a time delay before sending next data/command
;The LCD Enable (EN), used by the LCD to latch information presented to its data bus
-----------------------------------------------*/
void s_latch(unsigned char x){
	unsigned char z;
	for(z=0;z<x;z++){
		EN=1; //E=1 for high pulse
		delay_50ms(3);		//give LCD some time
		EN=0;	//E=0 for H-to-L pulse, i.e latch in
	}
}
 
/*-----------------------------------------------
Function thats responsible for creating a 50 ms 
time delay in the MCU
-----------------------------------------------*/
void delay_50ms(unsigned int x){
  unsigned char c;
	 
	for(c=0;c<x;c++){
		TMOD&=0x0F;		//;Timer 0, mode 1(16-bit mode
		TMOD|=0x01;		//;Timer 0, mode 1(16-bit mode
		
		TL0=0xFD;			//the low byte
		TH0=0x4B;			//the high byt
		
		TR0=1;				//start the timer 0
		while (TF0==0);//monitor timer flag 0 until it rolls over
			TR0=0;			//stop timer 0
			TF0=0;			//clear timer 0 flag
	}
}
 void prep_Wrt(void){
	set_sett();
	LCD=0x80;    			//LCD Command that Forces cursor to beginning to 1st line
	s_latch(1);

	LCD=0x0;	
	set_data();
	s_latch(1);
}
void prep_Wrt2(void){
	set_sett();
	LCD=0xC0;				//LCD Command Force cursor to beginning to 2nd line
	s_latch(1);

	LCD=0x0;
	set_data();
	s_latch(1);
}
void clr(void){
	delay_50ms(30);		//give LCD some time
	set_sett();
	LCD=0x1;			//Clear display screen
	s_latch(1);
}


void userInit(void){
	unsigned char c;
	ALARM_TRIG++;
	
	clr();
	prep_Wrt();
	
	if(ALARM_TRIG>3){
		ALARM_PIN=1;
		for(c=0;c<5;c++){
		LCD=asc_Alarm[c];
		s_latch(1);
		}
		while(1);
	}
	for(c=0;c<12;c++){
		LCD=asc_EnterPass[c];
		s_latch(1);
	}
	prep_Wrt2();
	prepKeyb();
}
/*=============================================================================
=============================================================================*/
/*-----------------------------------------------
;keyboard subroutine. This program sends the ASCII 
;code for pressed key to P2 of the LCD data pins
-----------------------------------------------*/
void prepKeyb(void){
	unsigned char chk=0,c,d;
	unsigned char alpha[6];
	do{
		C1=C2=C3=1;
		R1=R2=R3=R4=0;		//ground all rows at once
	
		if(C1==0){	//see if any key is pressed
			alpha[chk]=rowFinder1();
			chk++;
		}
		else if(C2==0){		//see if any key is pressed
			alpha[chk]=rowFinder2();
			chk++;
		}
		else if(C3==0){			//see if any key is pressed
			alpha[chk]=rowFinder3();
			chk++;
		}
	}while(chk<6);			//loop until codes are entered 6 digits
	
	for(d=0;d<6;d++){
		if(defPass[d]!=alpha[d]){
			clr();	
			prep_Wrt();
			for(c=0;c<14;c++){
				LCD=asc_Misc[c];
				s_latch(1);
			}
			
			prep_Wrt2();
			for(c=0;c<14;c++){
				LCD=asc_Redo[c];
				s_latch(1);
			}
			userInit();
			break;
		}
	}
	clr();	
	prep_Wrt();
	for(c=0;c<2;c++){
		LCD=asc_Success[c];
		s_latch(1);
	}
	MOTOR_1=1;
	MOTOR_2=0;
	
clr();	
			prep_Wrt();
			for(c=0;c<2;c++){
				LCD=asc_openDoor[c];
				s_latch(1);
			}
	
	delay_50ms(100); 
	
	MOTOR_1=0;
	MOTOR_2=1;
	
			
		clr();	
			prep_Wrt();
			for(c=0;c<2;c++){
				LCD=asc_closDoor[c];
				s_latch(1);
			}
	delay_50ms(100);
	
	MOTOR_1=0;
	MOTOR_2=0;
}
/*=============================================================================
=============================================================================*/

unsigned char rowFinder1(void){
	R1=R2=R3=R4=1;
	C1=C2=C3=0;
	
	if(R1==0){
		postKyData('1');
		return '1';
	}
	else if(R2==0){
		postKyData('4');
		return '4';
	}
	else if(R3==0){
		postKyData('7');
		return '7';
	}
	else if(R4==0){
		postKyData('*');
		return '*';
	}
}
unsigned char rowFinder2(void){
	R1=R2=R3=R4=1;
	C1=C2=C3=0;
	
	if(R1==0){
		postKyData('2');
		return '2';
	}
	else if(R2==0){
		postKyData('5');
		return '5';
	}
	else if(R3==0){
		postKyData('8');
		return '8';
	}
	else if(R4==0){
		postKyData('0');
		return '0';
	}
	return '$';
}
unsigned char rowFinder3(void){
	R1=R2=R3=R4=1;
	C1=C2=C3=0;
	
	if(R1==0){
		postKyData('3');
		return '3';
	}
	else if(R2==0){
		postKyData('6');
		return '6';
	}
	else if(R3==0){
		postKyData('9');
		return '9';
	}
	else if(R4==0){
		postKyData('#');
		return '#';
	}
	return '$';
}

void postKyData(unsigned char dt){
	
	while(R1==0||R2==0||R3==0||R4==0){}
	LCD=dt;
	s_latch(1);
	LCD=0x6;			//shift cursor right
	delay_50ms(1);//give LCD some time
}
void class_init(void){
	
	unsigned char c;
	
	user_switch=1;
	ALARM_TRIG=0;
	
while(1){
		
		prep_Wrt();
		
		for(c=0;c<10;c++){
			LCD=asc_Greet1[c];
			s_latch(1);
			
			if(user_switch==0)
				break;
		}
		if(user_switch==0){
			clr();
			break;
		}
		
		prep_Wrt2();
		for(c=0;c<8;c++){
			LCD=asc_Greet2[c];
			s_latch(1);
			
			if(user_switch==0)
				break;
		}
		if(user_switch==0){
			clr();
			break;
		}
	 clr();
	}
		
	prep_Wrt();
	for(c=0;c<9;c++){
		LCD=asc_Ndpass1[c];
		s_latch(1);
	}
	
	prep_Wrt2();
	for(c=0;c<11;c++){
		LCD=asc_Ndpass2[c];
		s_latch(1);
	}
	userInit();
	
	s_latch(1);
	s_latch(1);
	clr();
		set_sett();
		LCD=0x02;			//Command that cauuses the LCD Return home
		s_latch(1);
	P1=0;
	
	//if(CLOSE_DOOR==1)
			class_init();
}